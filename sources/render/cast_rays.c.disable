#include "../../includes/cub3d.h"
#include "../../libft/libft.h"
#include "../../includes/cub3d_render.h"
#include <math.h>

// projection 3d=
// (tile height / distance of player to the wall) * distance to projection
// distance of player to the wall=
// player_x_pos^2 + player_y_pos^2
// distance to projection =
// tan(tile_height / 2) * (window_width / 2)

int ft_cast_rays(t_game *game)
{
    int x;
    int y;
    int ray_distance;

    x = game->start->x;
    y = game->start->y;
    ray_distance = 180; // distance between rays
    while (game->textures->map[x][y] != '1' && game->textures->map[x + 1][y + 1] != '1'
        || game->textures->map[x - 1][y - 1] != '1')
    {
        x += cos(game->start->yaw) * M_PI / ray_distance;
        y += sin(game->start->yaw) * M_PI / ray_distance;
        mlx_pixel_put(game->mlx, game->mlx_win, x, y, RED);
    }
}

int ft_move_player_fov(t_game *game)
{
    int     i;
    float   new_yaw;

    i = -1;
    // new_yaw = 0.0333 = dividing our player angle 64 by window's witdh 1920, with it we ensure to cast every pixel in our angle
    new_yaw = 64 / WIDTH;
    while (++i < WIDTH)
    {
        ft_cast_rays(game);
        game->start->yaw += new_yaw;
    }
}

int ft_init_raycasting(t_game *game)
{
    double  vector_x;
    double  vector_y;
    double  camera_plane_x;
    double  camera_plane_y;
    double  camera_pos_x;
    double  camera_pos_y;
    double  ray_dir_x;
    double  ray_dir_y;

    // game->start->x;
    // game->start->y;
    vector_x = -1;
    vector_y = 0;
    camera_plane_x = 0.66;
    camera_plane_y = 0;

    int i;

    i = -1;
    while (++i < WIDTH)
    {
        camera_pos_x = 2 * i / WIDTH - 1;
        ray_dir_x = vector_x + camera_plane_x * camera_pos_x;
        ray_dir_y = vector_y+ camera_plane_y * camera_pos_x;
    }


}